from typing import Dict, Any, Optional

class BrokerBase:
    """
    Minimal interface the executor calls into.
    Implementations may ignore unsupported params (e.g., leverage on spot).
    """

    def get_price(self, symbol: str) -> float: ...
    def supports_symbol(self, symbol: str) -> bool: ...
    def place_limit(self, symbol: str, side: str, qty: float, price: float,
                    client_id: str, leverage: Optional[float] = None) -> str: ...
    def place_market(self, symbol: str, side: str, qty: float,
                     client_id: str, leverage: Optional[float] = None) -> str: ...
    def place_reduce_only_limit(self, symbol: str, side: str, qty: float, price: float,
                                client_id: str, leverage: Optional[float] = None) -> str: ...
    def place_stop(self, symbol: str, side: str, qty: float, stop_price: float,
                   client_id: str, leverage: Optional[float] = None) -> str: ...
    def order_status(self, order_id: str) -> Dict[str, Any]: ...
    def cancel_order(self, order_id: str) -> None: ...
    def filled_size(self, order_id: str) -> float: ...
